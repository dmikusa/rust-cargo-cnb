// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	packit "github.com/paketo-buildpacks/packit"
	mock "github.com/stretchr/testify/mock"

	url "net/url"
)

// Runner is an autogenerated mock type for the Runner type
type Runner struct {
	mock.Mock
}

// Install provides a mock function with given fields: srcDir, workLayer, destLayer
func (_m *Runner) Install(srcDir string, workLayer packit.Layer, destLayer packit.Layer) error {
	ret := _m.Called(srcDir, workLayer, destLayer)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, packit.Layer, packit.Layer) error); ok {
		r0 = rf(srcDir, workLayer, destLayer)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InstallMember provides a mock function with given fields: memberPath, srcDir, workLayer, destLayer
func (_m *Runner) InstallMember(memberPath string, srcDir string, workLayer packit.Layer, destLayer packit.Layer) error {
	ret := _m.Called(memberPath, srcDir, workLayer, destLayer)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, packit.Layer, packit.Layer) error); ok {
		r0 = rf(memberPath, srcDir, workLayer, destLayer)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WorkspaceMembers provides a mock function with given fields: srcDir, workLayer, destLayer
func (_m *Runner) WorkspaceMembers(srcDir string, workLayer packit.Layer, destLayer packit.Layer) ([]url.URL, error) {
	ret := _m.Called(srcDir, workLayer, destLayer)

	var r0 []url.URL
	if rf, ok := ret.Get(0).(func(string, packit.Layer, packit.Layer) []url.URL); ok {
		r0 = rf(srcDir, workLayer, destLayer)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]url.URL)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, packit.Layer, packit.Layer) error); ok {
		r1 = rf(srcDir, workLayer, destLayer)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
